# Boletín de Ejercicios - Programación Orientada a Objetos (POO) en Python

## Introducción
Este boletín te guiará paso a paso a través de ejercicios prácticos para aprender y reforzar los conceptos fundamentales de la Programación Orientada a Objetos (POO) en Python. Cada ejercicio incluye una descripción y un ejemplo para ayudarte a empezar.

---

## 1. Clases y Objetos
**Objetivo:** Crear y manipular clases y objetos.

### Ejercicio 1.1: Tu primera clase
Crea una clase llamada `Coche` que tenga los siguientes atributos:
- `marca` (cadena de texto)
- `modelo` (cadena de texto)
- `año` (entero)

Incluye un método llamado `detalles` que devuelva una cadena con la información del coche.

**Ejemplo de uso:**
```python
mi_coche = Coche("Toyota", "Corolla", 2020)
print(mi_coche.detalles())  # "Marca: Toyota, Modelo: Corolla, Año: 2020"
```

### Ejercicio 1.2: Modificar atributos
Añade un método llamado `actualizar_modelo` que permita cambiar el modelo del coche.

**Ejemplo de uso:**
```python
mi_coche.actualizar_modelo("Camry")
print(mi_coche.detalles())  # "Marca: Toyota, Modelo: Camry, Año: 2020"
```

---

## 2. Encapsulamiento
**Objetivo:** Proteger los datos dentro de una clase.

### Ejercicio 2.1: Atributos privados
Modifica la clase `Coche` para que los atributos `marca`, `modelo` y `año` sean privados. Esto significa que no deben ser accesibles directamente desde fuera de la clase.

Para lograrlo:
1. Cambia los nombres de los atributos para que comiencen con doble guion bajo (`__`). Por ejemplo: `__marca`, `__modelo`, `__año`.
2. Crea métodos "getter" que permitan acceder a los valores de los atributos privados. Por ejemplo:
   - `get_marca`: devuelve la marca del coche.
   - `get_modelo`: devuelve el modelo del coche.
   - `get_año`: devuelve el año del coche.
3. Crea métodos "setter" que permitan modificar los valores de los atributos privados. Por ejemplo:
   - `set_marca`: actualiza la marca del coche.
   - `set_modelo`: actualiza el modelo del coche.
   - `set_año`: actualiza el año del coche.

**Ejemplo de uso:**
```python
mi_coche = Coche("Honda", "Civic", 2018)
print(mi_coche.get_marca())  # "Honda"
mi_coche.set_año(2022)
print(mi_coche.get_año())  # 2022
print(mi_coche.detalles())  # "Marca: Honda, Modelo: Civic, Año: 2022"
```
**Consejo:**
- El encapsulamiento ayuda a evitar cambios accidentales en los datos desde fuera de la clase y permite controlar cómo se accede y modifica cada atributo.

---

## 3. Herencia
**Objetivo:** Crear clases que hereden atributos y métodos de otra clase.

### Ejercicio 3.1: Herencia básica
Crea una clase base llamada `Animal` con los siguientes atributos y métodos:
- `nombre` (cadena de texto)
- Método `hacer_sonido()` que devuelve "Sonido genérico".

Luego, crea dos clases derivadas:
1. `Perro`, que sobrescribe el método `hacer_sonido` para devolver "Guau".
2. `Gato`, que sobrescribe el método `hacer_sonido` para devolver "Miau".

**Ejemplo de uso:**
```python
mi_perro = Perro("Rex")
print(mi_perro.hacer_sonido())  # "Guau"

mi_gato = Gato("Luna")
print(mi_gato.hacer_sonido())  # "Miau"
```

---

## 4. Polimorfismo
**Objetivo:** Usar polimorfismo para tratar objetos de distintas clases de forma uniforme.

### Ejercicio 4.1: Métodos comunes
Crea una lista de objetos que incluyan instancias de `Perro` y `Gato`. Recorre la lista y llama al método `hacer_sonido` de cada objeto.

**Ejemplo de uso:**
```python
animales = [Perro("Rex"), Gato("Luna")]
for animal in animales:
    print(animal.hacer_sonido())
# Salida:
# "Guau"
# "Miau"
```

---

## 5. Proyecto Final
**Objetivo:** Aplicar los conceptos aprendidos.

### Ejercicio 5.1: Sistema de gestión de biblioteca
Crea un sistema de gestión de biblioteca con las siguientes clases:
1. `Libro`: atributos como `titulo`, `autor`, y `estado` ("disponible" o "prestado").
2. `Usuario`: atributos como `nombre` y una lista de libros prestados.
3. Métodos para prestar y devolver libros, y para mostrar el estado actual de la biblioteca.

**Ejemplo de uso:**
```python
libro1 = Libro("1984", "George Orwell")
usuario1 = Usuario("Ana")

usuario1.prestar_libro(libro1)
print(libro1.estado)  # "prestado"
usuario1.devolver_libro(libro1)
print(libro1.estado)  # "disponible"
```

---

Recuerda probar cada ejercicio y escribir tus dudas o dificultades. ¡Vamos a practicar y reforzar juntos tus conocimientos de POO!

